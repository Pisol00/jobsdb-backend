// src/utils/errorLogger.ts
import { ApiError } from '../middleware/errorHandler';
import { env } from '../config/env';

/**
 * ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á log
 */
export enum LogLevel {
  INFO = 'INFO',
  WARN = 'WARN',
  ERROR = 'ERROR',
  FATAL = 'FATAL',
}

/**
 * ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ log
 */
interface LogContext {
  userId?: string;
  requestId?: string;
  path?: string;
  [key: string]: any;
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error ‡∏´‡∏£‡∏∑‡∏≠ log message
 * 
 * @param level ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á log
 * @param message ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ log
 * @param error error object (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
 * @param context ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
 */
export const logMessage = (
  level: LogLevel,
  message: string,
  error?: Error | null,
  context?: LogContext
) => {
  const timestamp = new Date().toISOString();
  const isDevelopment = env.NODE_ENV === 'development';
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á log object
  const logObject = {
    timestamp,
    level,
    message,
    error: error ? {
      name: error.name,
      message: error.message,
      stack: isDevelopment ? error.stack : undefined,
    } : undefined,
    ...context,
  };
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö log
  switch (level) {
    case LogLevel.INFO:
      console.log(`‚úÖ [${timestamp}] INFO:`, message, context || '');
      break;
    case LogLevel.WARN:
      console.warn(`‚ö†Ô∏è [${timestamp}] WARN:`, message, error || '', context || '');
      break;
    case LogLevel.ERROR:
      console.error(`‚ùå [${timestamp}] ERROR:`, message, error || '', context || '');
      break;
    case LogLevel.FATAL:
      console.error(`üî• [${timestamp}] FATAL:`, message, error || '', context || '');
      break;
  }
  
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production ‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á log ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô Sentry, LogRocket, etc.
  if (env.NODE_ENV === 'production') {
    // TODO: ‡∏™‡πà‡∏á log ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ monitoring ‡∏´‡∏£‡∏∑‡∏≠ logging ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
    // ‡πÄ‡∏ä‡πà‡∏ô Sentry.captureException(error, { extra: context });
  }
  
  return logObject;
};

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á ApiError
 * 
 * @param statusCode HTTP status code
 * @param message ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param error error object ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
 * @param context ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
 * @returns ApiError
 */
export const logAndCreateApiError = (
  statusCode: number,
  message: string,
  error?: Error | null,
  context?: LogContext
): ApiError => {
  const logLevel = statusCode >= 500 ? LogLevel.ERROR : LogLevel.WARN;
  
  logMessage(logLevel, message, error, context);
  
  return new ApiError(statusCode, message);
};

/**
 * Utility ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö async function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠
 * 
 * @param fn async function ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ wrap
 * @param errorHandler function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
 * @returns wrapped function
 */
export function withErrorHandling<T, A extends any[]>(
  fn: (...args: A) => Promise<T>,
  errorHandler: (error: any, ...args: A) => Promise<T>
) {
  return async (...args: A): Promise<T> => {
    try {
      return await fn(...args);
    } catch (error) {
      return errorHandler(error, ...args);
    }
  };
}